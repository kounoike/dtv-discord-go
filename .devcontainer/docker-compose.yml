version: '3.8'
services:
  devcontainer:
    build: ./devcontainer
    # image: mcr.microsoft.com/devcontainers/go:0-1.20-bullseye
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [ "gpu", "video" ]
    volumes:
      - ../..:/workspaces:cached
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - /qnap/video/develop/recorded:/recorded:rw
      - /qnap/video/develop/encoded:/encoded:rw
      - /qnap/video/develop/transcribed:/transcribed:rw
      - /qnap/video/develop/index:/index:rw
    # network_mode: service:tuner
    command: sleep infinity
    environment:
      TZ: Asia/Tokyo
    links:
      - tuner:tuner
      - db:db
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      tuner:
        condition: service_healthy
  db:
    image: mariadb:latest
    volumes:
      - mysql-db:/var/lib/mysql:rw
      - ./db:/docker-entrypoint-initdb.d:ro
    ports:
      - "3306:3306"
    environment:
      MYSQL_USER: dtv-discord
      MYSQL_PASSWORD: dtv-discord
      MYSQL_ROOT_PASSWORD: dtv-discord
      MYSQL_DATABASE: dtv
      TZ: "Asia/Tokyo"
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --performance-schema=false --expire_logs_days=1 --default-authentication-plugin=mysql_native_password
    restart: always
  redis:
    image: redis:latest
    volumes:
      - redis-db:/data
    command: redis-server --appendonly yes
    # ports:
    #   - "6379:6379"
  tuner:
    # image: mirakc/mirakc
    build: ./mirakc/docker
    privileged: true
    ports:
      - "40772:40772"
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./mirakc/epg:/var/lib/mirakc/epg:rw
      - ./mirakc/config/config.yml:/etc/mirakc/config.yml:ro
      - /qnap/video/develop/recorded:/recorded:rw
      - /var/run/pcscd:/var/run/pcscd:rw
    devices:
      # - /dev/px4video0
      # - /dev/px4video1
      # - /dev/px4video2
      # - /dev/px4video3
      - /dev/bus
      - /dev/dvb
    environment:
      TZ: Asia/Tokyo
      MIRAKC_DEBUG_CHILD_PROCESS: ''
      RUST_LOG: 'info,mirakc=info'
      MIRAKC_ARIB_NO_TIMESTAMP: ''
      MIRAKC_ARIB_LOG: 'info'
    restart: always
  asynqmon:
    image: hibiken/asynqmon
    command:
      - "--redis-addr"
      - "redis:6379"
    links:
      - redis:redis
    depends_on:
      redis:
        condition: service_healthy
  web:
    build: ../docker-compose/web
    links:
      - devcontainer:frontend
      - tuner:tuner
      - meilisearch:meilisearch
    volumes:
      - /qnap/video/develop/recorded:/recorded:ro
      - /qnap/video/develop/encoded:/encoded:ro
      - /qnap/video/develop/transcribed:/transcribed:ro
      - /qnap/video/develop/index:/index:ro
      - ts-state:/var/lib/tailscale:rw
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - net_admin
      - sys_module
    environment:
      TZ: Asia/Tokyo
      TS_HOSTNAME: tv-dev
  meilisearch:
    image: getmeili/meilisearch:prototype-japanese-2
    volumes:
      - /qnap/video/develop/meili:/melili_data:rw
    restart: always
  airflow-init:
    image: debian:bullseye-slim
    volumes:
      - /qnap/video/develop/airflow:/opt/airflow
    command:
      - /bin/sh
      - -c
      - mkdir -p /opt/airflow/logs /opt/airflow/dags /opt/airflow/plugins && chown -R 1000:1000 /opt/airflow
  airflow-web:
    image: apache/airflow:latest
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    links:
      - db:db
      - redis:redis
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: mysql+mysqlconnector://airflow:airflow@db/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/1
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      # AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
      # for other purpose (development, test and especially production usage) build/extend Airflow image.
      # _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    volumes:
      - /qnap/video/develop/airflow/dags:/opt/airflow/dags
      - /qnap/video/develop/airflow/logs:/opt/airflow/logs
      - /qnap/video/develop/airflow/plugins:/opt/airflow/plugins
    user: "${AIRFLOW_UID:-1000}:0"
    command:
      - airflow
      - web

volumes:
  mysql-db:
  redis-db:
  ts-state:
