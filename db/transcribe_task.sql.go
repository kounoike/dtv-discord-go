// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: transcribe_task.sql

package db

import (
	"context"
)

const getTranscribeTaskByTaskID = `-- name: GetTranscribeTaskByTaskID :one
SELECT id, task_id, status, created_at, updated_at FROM ` + "`" + `transcribe_task` + "`" + ` WHERE ` + "`" + `task_id` + "`" + ` = ?
`

func (q *Queries) GetTranscribeTaskByTaskID(ctx context.Context, taskID string) (TranscribeTask, error) {
	row := q.db.QueryRowContext(ctx, getTranscribeTaskByTaskID, taskID)
	var i TranscribeTask
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertTranscribeTask = `-- name: InsertTranscribeTask :exec
INSERT INTO ` + "`" + `transcribe_task` + "`" + ` (
    ` + "`" + `task_id` + "`" + `,
    ` + "`" + `status` + "`" + `
) VALUES (?, ?)
`

type InsertTranscribeTaskParams struct {
	TaskID string `json:"taskID"`
	Status string `json:"status"`
}

func (q *Queries) InsertTranscribeTask(ctx context.Context, arg InsertTranscribeTaskParams) error {
	_, err := q.db.ExecContext(ctx, insertTranscribeTask, arg.TaskID, arg.Status)
	return err
}
