// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: recorded_files.sql

package db

import (
	"context"
	"database/sql"
)

const getRecordedFiles = `-- name: GetRecordedFiles :one
SELECT
    ` + "`" + `recorded_files` + "`" + `.` + "`" + `program_id` + "`" + `,
    ` + "`" + `recorded_files` + "`" + `.` + "`" + `m2ts_path` + "`" + `,
    ` + "`" + `recorded_files` + "`" + `.` + "`" + `mp4_path` + "`" + `,
    ` + "`" + `recorded_files` + "`" + `.` + "`" + `aribb24_txt_path` + "`" + `,
    ` + "`" + `recorded_files` + "`" + `.` + "`" + `transcribed_txt_path` + "`" + `,
    ` + "`" + `program` + "`" + `.` + "`" + `json` + "`" + `,
    ` + "`" + `program` + "`" + `.` + "`" + `start_at` + "`" + `,
    ` + "`" + `program` + "`" + `.` + "`" + `duration` + "`" + `,
    ` + "`" + `program` + "`" + `.` + "`" + `name` + "`" + `,
    ` + "`" + `program` + "`" + `.` + "`" + `description` + "`" + `,
    ` + "`" + `program` + "`" + `.` + "`" + `genre` + "`" + `,
    ` + "`" + `service` + "`" + `.name AS service_name
FROM ` + "`" + `recorded_files` + "`" + `
JOIN ` + "`" + `program` + "`" + ` ON ` + "`" + `program` + "`" + `.` + "`" + `id` + "`" + ` = ` + "`" + `recorded_files` + "`" + `.` + "`" + `program_id` + "`" + `
JOIN ` + "`" + `service` + "`" + ` ON ` + "`" + `program` + "`" + `.` + "`" + `service_id` + "`" + ` = ` + "`" + `service` + "`" + `.` + "`" + `service_id` + "`" + ` AND ` + "`" + `program` + "`" + `.` + "`" + `network_id` + "`" + ` = ` + "`" + `service` + "`" + `.` + "`" + `network_id` + "`" + `
WHERE ` + "`" + `recorded_files` + "`" + `.` + "`" + `program_id` + "`" + ` = ?
`

type GetRecordedFilesRow struct {
	ProgramID          int64          `json:"programID"`
	M2tsPath           sql.NullString `json:"m2tsPath"`
	Mp4Path            sql.NullString `json:"mp4Path"`
	Aribb24TxtPath     sql.NullString `json:"aribb24TxtPath"`
	TranscribedTxtPath sql.NullString `json:"transcribedTxtPath"`
	Json               string         `json:"json"`
	StartAt            int64          `json:"startAt"`
	Duration           int32          `json:"duration"`
	Name               string         `json:"name"`
	Description        string         `json:"description"`
	Genre              string         `json:"genre"`
	ServiceName        string         `json:"serviceName"`
}

func (q *Queries) GetRecordedFiles(ctx context.Context, programID int64) (GetRecordedFilesRow, error) {
	row := q.db.QueryRowContext(ctx, getRecordedFiles, programID)
	var i GetRecordedFilesRow
	err := row.Scan(
		&i.ProgramID,
		&i.M2tsPath,
		&i.Mp4Path,
		&i.Aribb24TxtPath,
		&i.TranscribedTxtPath,
		&i.Json,
		&i.StartAt,
		&i.Duration,
		&i.Name,
		&i.Description,
		&i.Genre,
		&i.ServiceName,
	)
	return i, err
}

const insertRecordedFiles = `-- name: InsertRecordedFiles :exec
INSERT INTO ` + "`" + `recorded_files` + "`" + ` (
    ` + "`" + `program_id` + "`" + `,
    ` + "`" + `m2ts_path` + "`" + `
) VALUES (?, ?)
`

type InsertRecordedFilesParams struct {
	ProgramID int64          `json:"programID"`
	M2tsPath  sql.NullString `json:"m2tsPath"`
}

func (q *Queries) InsertRecordedFiles(ctx context.Context, arg InsertRecordedFilesParams) error {
	_, err := q.db.ExecContext(ctx, insertRecordedFiles, arg.ProgramID, arg.M2tsPath)
	return err
}

const listRecordedFiles = `-- name: ListRecordedFiles :many
SELECT
    ` + "`" + `recorded_files` + "`" + `.` + "`" + `program_id` + "`" + `,
    ` + "`" + `recorded_files` + "`" + `.` + "`" + `m2ts_path` + "`" + `,
    ` + "`" + `recorded_files` + "`" + `.` + "`" + `mp4_path` + "`" + `,
    ` + "`" + `recorded_files` + "`" + `.` + "`" + `aribb24_txt_path` + "`" + `,
    ` + "`" + `recorded_files` + "`" + `.` + "`" + `transcribed_txt_path` + "`" + `,
    ` + "`" + `program` + "`" + `.` + "`" + `json` + "`" + `,
    ` + "`" + `program` + "`" + `.` + "`" + `start_at` + "`" + `,
    ` + "`" + `program` + "`" + `.` + "`" + `duration` + "`" + `,
    ` + "`" + `program` + "`" + `.` + "`" + `name` + "`" + `,
    ` + "`" + `program` + "`" + `.` + "`" + `description` + "`" + `,
    ` + "`" + `program` + "`" + `.` + "`" + `genre` + "`" + `,
    ` + "`" + `service` + "`" + `.name AS service_name
FROM ` + "`" + `recorded_files` + "`" + `
JOIN ` + "`" + `program` + "`" + ` ON ` + "`" + `program` + "`" + `.` + "`" + `id` + "`" + ` = ` + "`" + `recorded_files` + "`" + `.` + "`" + `program_id` + "`" + `
JOIN ` + "`" + `service` + "`" + ` ON ` + "`" + `program` + "`" + `.` + "`" + `service_id` + "`" + ` = ` + "`" + `service` + "`" + `.` + "`" + `service_id` + "`" + ` AND ` + "`" + `program` + "`" + `.` + "`" + `network_id` + "`" + ` = ` + "`" + `service` + "`" + `.` + "`" + `network_id` + "`" + `
`

type ListRecordedFilesRow struct {
	ProgramID          int64          `json:"programID"`
	M2tsPath           sql.NullString `json:"m2tsPath"`
	Mp4Path            sql.NullString `json:"mp4Path"`
	Aribb24TxtPath     sql.NullString `json:"aribb24TxtPath"`
	TranscribedTxtPath sql.NullString `json:"transcribedTxtPath"`
	Json               string         `json:"json"`
	StartAt            int64          `json:"startAt"`
	Duration           int32          `json:"duration"`
	Name               string         `json:"name"`
	Description        string         `json:"description"`
	Genre              string         `json:"genre"`
	ServiceName        string         `json:"serviceName"`
}

func (q *Queries) ListRecordedFiles(ctx context.Context) ([]ListRecordedFilesRow, error) {
	rows, err := q.db.QueryContext(ctx, listRecordedFiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRecordedFilesRow
	for rows.Next() {
		var i ListRecordedFilesRow
		if err := rows.Scan(
			&i.ProgramID,
			&i.M2tsPath,
			&i.Mp4Path,
			&i.Aribb24TxtPath,
			&i.TranscribedTxtPath,
			&i.Json,
			&i.StartAt,
			&i.Duration,
			&i.Name,
			&i.Description,
			&i.Genre,
			&i.ServiceName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRecordedFilesAribb24Txt = `-- name: UpdateRecordedFilesAribb24Txt :exec
UPDATE ` + "`" + `recorded_files` + "`" + ` SET
    ` + "`" + `aribb24_txt_path` + "`" + ` = ?
WHERE ` + "`" + `program_id` + "`" + ` = ?
`

type UpdateRecordedFilesAribb24TxtParams struct {
	Aribb24TxtPath sql.NullString `json:"aribb24TxtPath"`
	ProgramID      int64          `json:"programID"`
}

func (q *Queries) UpdateRecordedFilesAribb24Txt(ctx context.Context, arg UpdateRecordedFilesAribb24TxtParams) error {
	_, err := q.db.ExecContext(ctx, updateRecordedFilesAribb24Txt, arg.Aribb24TxtPath, arg.ProgramID)
	return err
}

const updateRecordedFilesMp4 = `-- name: UpdateRecordedFilesMp4 :exec
UPDATE ` + "`" + `recorded_files` + "`" + ` SET
    ` + "`" + `mp4_path` + "`" + ` = ?
WHERE ` + "`" + `program_id` + "`" + ` = ?
`

type UpdateRecordedFilesMp4Params struct {
	Mp4Path   sql.NullString `json:"mp4Path"`
	ProgramID int64          `json:"programID"`
}

func (q *Queries) UpdateRecordedFilesMp4(ctx context.Context, arg UpdateRecordedFilesMp4Params) error {
	_, err := q.db.ExecContext(ctx, updateRecordedFilesMp4, arg.Mp4Path, arg.ProgramID)
	return err
}

const updateRecordedFilesTranscribedTxt = `-- name: UpdateRecordedFilesTranscribedTxt :exec
UPDATE ` + "`" + `recorded_files` + "`" + ` SET
    ` + "`" + `transcribed_txt_path` + "`" + ` = ?
WHERE ` + "`" + `program_id` + "`" + ` = ?
`

type UpdateRecordedFilesTranscribedTxtParams struct {
	TranscribedTxtPath sql.NullString `json:"transcribedTxtPath"`
	ProgramID          int64          `json:"programID"`
}

func (q *Queries) UpdateRecordedFilesTranscribedTxt(ctx context.Context, arg UpdateRecordedFilesTranscribedTxtParams) error {
	_, err := q.db.ExecContext(ctx, updateRecordedFilesTranscribedTxt, arg.TranscribedTxtPath, arg.ProgramID)
	return err
}
