// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: component_version.sql

package db

import (
	"context"
)

const getComponentVersion = `-- name: GetComponentVersion :one
SELECT id, component, version, created_at, updated_at FROM ` + "`" + `component_version` + "`" + ` WHERE ` + "`" + `component` + "`" + ` = ?
`

func (q *Queries) GetComponentVersion(ctx context.Context, component string) (ComponentVersion, error) {
	row := q.db.QueryRowContext(ctx, getComponentVersion, component)
	var i ComponentVersion
	err := row.Scan(
		&i.ID,
		&i.Component,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertComponentVersion = `-- name: InsertComponentVersion :exec
INSERT ` + "`" + `component_version` + "`" + ` (` + "`" + `component` + "`" + `, ` + "`" + `version` + "`" + `) VALUES (?, ?)
`

type InsertComponentVersionParams struct {
	Component string `json:"component"`
	Version   string `json:"version"`
}

func (q *Queries) InsertComponentVersion(ctx context.Context, arg InsertComponentVersionParams) error {
	_, err := q.db.ExecContext(ctx, insertComponentVersion, arg.Component, arg.Version)
	return err
}

const updateComponentVersion = `-- name: UpdateComponentVersion :exec
UPDATE ` + "`" + `component_version` + "`" + ` SET ` + "`" + `version` + "`" + ` = ? WHERE ` + "`" + `component` + "`" + ` = ?
`

type UpdateComponentVersionParams struct {
	Version   string `json:"version"`
	Component string `json:"component"`
}

func (q *Queries) UpdateComponentVersion(ctx context.Context, arg UpdateComponentVersionParams) error {
	_, err := q.db.ExecContext(ctx, updateComponentVersion, arg.Version, arg.Component)
	return err
}
