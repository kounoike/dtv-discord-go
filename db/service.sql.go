// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: service.sql

package db

import (
	"context"
)

const getService = `-- name: GetService :one
SELECT id, service_id, network_id, type, logo_id, remote_control_key_id, name, channel_type, channel, has_logo_data, created_at, updated_at FROM ` + "`" + `service` + "`" + ` WHERE ` + "`" + `id` + "`" + ` = ?
`

func (q *Queries) GetService(ctx context.Context, id int64) (Service, error) {
	row := q.db.QueryRowContext(ctx, getService, id)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.ServiceID,
		&i.NetworkID,
		&i.Type,
		&i.LogoID,
		&i.RemoteControlKeyID,
		&i.Name,
		&i.ChannelType,
		&i.Channel,
		&i.HasLogoData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createOrUpdateService = `-- name: createOrUpdateService :exec
INSERT INTO ` + "`" + `service` + "`" + ` (
    ` + "`" + `id` + "`" + `,
    ` + "`" + `service_id` + "`" + `,
    ` + "`" + `network_id` + "`" + `,
    ` + "`" + `type` + "`" + `,
    ` + "`" + `logo_id` + "`" + `,
    ` + "`" + `remote_control_key_id` + "`" + `,
    ` + "`" + `name` + "`" + `,
    ` + "`" + `channel_type` + "`" + `,
    ` + "`" + `channel` + "`" + `,
    ` + "`" + `has_logo_data` + "`" + `
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
ON DUPLICATE KEY UPDATE
    ` + "`" + `service_id` + "`" + ` = VALUES(` + "`" + `service_id` + "`" + `),
    ` + "`" + `network_id` + "`" + ` = VALUES(` + "`" + `network_id` + "`" + `),
    ` + "`" + `type` + "`" + ` = VALUES(` + "`" + `type` + "`" + `),
    ` + "`" + `logo_id` + "`" + ` = VALUES(` + "`" + `logo_id` + "`" + `),
    ` + "`" + `remote_control_key_id` + "`" + ` = VALUES(` + "`" + `remote_control_key_id` + "`" + `),
    ` + "`" + `channel_type` + "`" + ` = VALUES(` + "`" + `channel_type` + "`" + `),
    ` + "`" + `channel` + "`" + ` = VALUES(` + "`" + `channel` + "`" + `),
    ` + "`" + `has_logo_data` + "`" + ` = VALUES(` + "`" + `has_logo_data` + "`" + `)
`

type createOrUpdateServiceParams struct {
	ID                 int64  `json:"id"`
	ServiceID          int32  `json:"serviceID"`
	NetworkID          int32  `json:"networkID"`
	Type               int32  `json:"type"`
	LogoID             int32  `json:"logoID"`
	RemoteControlKeyID int32  `json:"remoteControlKeyID"`
	Name               string `json:"name"`
	ChannelType        string `json:"channelType"`
	Channel            string `json:"channel"`
	HasLogoData        bool   `json:"hasLogoData"`
}

func (q *Queries) createOrUpdateService(ctx context.Context, arg createOrUpdateServiceParams) error {
	_, err := q.db.ExecContext(ctx, createOrUpdateService,
		arg.ID,
		arg.ServiceID,
		arg.NetworkID,
		arg.Type,
		arg.LogoID,
		arg.RemoteControlKeyID,
		arg.Name,
		arg.ChannelType,
		arg.Channel,
		arg.HasLogoData,
	)
	return err
}
