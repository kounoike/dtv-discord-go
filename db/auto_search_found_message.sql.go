// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: auto_search_found_message.sql

package db

import (
	"context"
)

const countAutoSearchFoundMessagesByProgramID = `-- name: CountAutoSearchFoundMessagesByProgramID :one
SELECT 
    count(*)
FROM
    ` + "`" + `auto_search_found_message` + "`" + `
WHERE
    ` + "`" + `program_id` + "`" + ` = ?
`

func (q *Queries) CountAutoSearchFoundMessagesByProgramID(ctx context.Context, programID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAutoSearchFoundMessagesByProgramID, programID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteAutoSearchFoundMessagesByThreadID = `-- name: DeleteAutoSearchFoundMessagesByThreadID :exec
DELETE FROM ` + "`" + `auto_search_found_message` + "`" + `
WHERE
    ` + "`" + `thread_id` + "`" + ` = ?
`

func (q *Queries) DeleteAutoSearchFoundMessagesByThreadID(ctx context.Context, threadID string) error {
	_, err := q.db.ExecContext(ctx, deleteAutoSearchFoundMessagesByThreadID, threadID)
	return err
}

const insertAutoSearchFoundMessage = `-- name: InsertAutoSearchFoundMessage :exec
INSERT INTO ` + "`" + `auto_search_found_message` + "`" + ` (
    ` + "`" + `thread_id` + "`" + `,
    ` + "`" + `program_id` + "`" + `,
    ` + "`" + `message_id` + "`" + `
) VALUES (?, ?, ?)
`

type InsertAutoSearchFoundMessageParams struct {
	ThreadID  string `json:"threadID"`
	ProgramID int64  `json:"programID"`
	MessageID string `json:"messageID"`
}

func (q *Queries) InsertAutoSearchFoundMessage(ctx context.Context, arg InsertAutoSearchFoundMessageParams) error {
	_, err := q.db.ExecContext(ctx, insertAutoSearchFoundMessage, arg.ThreadID, arg.ProgramID, arg.MessageID)
	return err
}

const listAutoSearchFoundMessages = `-- name: ListAutoSearchFoundMessages :many
SELECT 
    id, thread_id, program_id, message_id, created_at, updated_at
FROM
    ` + "`" + `auto_search_found_message` + "`" + `
WHERE
    ` + "`" + `thread_id` + "`" + ` = ?
`

func (q *Queries) ListAutoSearchFoundMessages(ctx context.Context, threadID string) ([]AutoSearchFoundMessage, error) {
	rows, err := q.db.QueryContext(ctx, listAutoSearchFoundMessages, threadID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AutoSearchFoundMessage
	for rows.Next() {
		var i AutoSearchFoundMessage
		if err := rows.Scan(
			&i.ID,
			&i.ThreadID,
			&i.ProgramID,
			&i.MessageID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
