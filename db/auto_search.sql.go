// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: auto_search.sql

package db

import (
	"context"
	"database/sql"
)

const deleteAutoSearch = `-- name: DeleteAutoSearch :exec
DELETE FROM ` + "`" + `auto_search` + "`" + `
WHERE
    ` + "`" + `id` + "`" + ` = ?
`

func (q *Queries) DeleteAutoSearch(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAutoSearch, id)
	return err
}

const getAutoSearch = `-- name: GetAutoSearch :one
SELECT
    id, name, title, channel, genre, kana_search, fuzzy_search, regex_search, record, thread_id, created_at, updated_at
FROM
    ` + "`" + `auto_search` + "`" + `
WHERE
    ` + "`" + `id` + "`" + ` = ?
`

func (q *Queries) GetAutoSearch(ctx context.Context, id int32) (AutoSearch, error) {
	row := q.db.QueryRowContext(ctx, getAutoSearch, id)
	var i AutoSearch
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Title,
		&i.Channel,
		&i.Genre,
		&i.KanaSearch,
		&i.FuzzySearch,
		&i.RegexSearch,
		&i.Record,
		&i.ThreadID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAutoSearchByThreadID = `-- name: GetAutoSearchByThreadID :one
SELECT
    id, name, title, channel, genre, kana_search, fuzzy_search, regex_search, record, thread_id, created_at, updated_at
FROM
    ` + "`" + `auto_search` + "`" + `
WHERE
    ` + "`" + `thread_id` + "`" + ` = ?
`

func (q *Queries) GetAutoSearchByThreadID(ctx context.Context, threadID string) (AutoSearch, error) {
	row := q.db.QueryRowContext(ctx, getAutoSearchByThreadID, threadID)
	var i AutoSearch
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Title,
		&i.Channel,
		&i.Genre,
		&i.KanaSearch,
		&i.FuzzySearch,
		&i.RegexSearch,
		&i.Record,
		&i.ThreadID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertAutoSearch = `-- name: InsertAutoSearch :execresult
INSERT INTO ` + "`" + `auto_search` + "`" + ` (
    ` + "`" + `name` + "`" + `,
    ` + "`" + `title` + "`" + `,
    ` + "`" + `channel` + "`" + `,
    ` + "`" + `genre` + "`" + `,
    ` + "`" + `kana_search` + "`" + `,
    ` + "`" + `fuzzy_search` + "`" + `,
    ` + "`" + `regex_search` + "`" + `,
    ` + "`" + `record` + "`" + `,
    ` + "`" + `thread_id` + "`" + `
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type InsertAutoSearchParams struct {
	Name        string `json:"name"`
	Title       string `json:"title"`
	Channel     string `json:"channel"`
	Genre       string `json:"genre"`
	KanaSearch  bool   `json:"kanaSearch"`
	FuzzySearch bool   `json:"fuzzySearch"`
	RegexSearch bool   `json:"regexSearch"`
	Record      bool   `json:"record"`
	ThreadID    string `json:"threadID"`
}

func (q *Queries) InsertAutoSearch(ctx context.Context, arg InsertAutoSearchParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertAutoSearch,
		arg.Name,
		arg.Title,
		arg.Channel,
		arg.Genre,
		arg.KanaSearch,
		arg.FuzzySearch,
		arg.RegexSearch,
		arg.Record,
		arg.ThreadID,
	)
}

const listAutoSearch = `-- name: ListAutoSearch :many
SELECT
    id, name, title, channel, genre, kana_search, fuzzy_search, regex_search, record, thread_id, created_at, updated_at
FROM
    ` + "`" + `auto_search` + "`" + `
`

func (q *Queries) ListAutoSearch(ctx context.Context) ([]AutoSearch, error) {
	rows, err := q.db.QueryContext(ctx, listAutoSearch)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AutoSearch
	for rows.Next() {
		var i AutoSearch
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Title,
			&i.Channel,
			&i.Genre,
			&i.KanaSearch,
			&i.FuzzySearch,
			&i.RegexSearch,
			&i.Record,
			&i.ThreadID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
