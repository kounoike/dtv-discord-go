// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: program.sql

package db

import (
	"context"
	"encoding/json"
)

const getProgram = `-- name: GetProgram :one
SELECT id, json, event_id, service_id, network_id, start_at, duration, is_free, name, description, created_at, updated_at FROM ` + "`" + `program` + "`" + ` WHERE ` + "`" + `id` + "`" + ` = ?
`

func (q *Queries) GetProgram(ctx context.Context, id int64) (Program, error) {
	row := q.db.QueryRowContext(ctx, getProgram, id)
	var i Program
	err := row.Scan(
		&i.ID,
		&i.Json,
		&i.EventID,
		&i.ServiceID,
		&i.NetworkID,
		&i.StartAt,
		&i.Duration,
		&i.IsFree,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createProgram = `-- name: createProgram :exec
INSERT INTO ` + "`" + `program` + "`" + ` (
    ` + "`" + `id` + "`" + `,
    ` + "`" + `json` + "`" + `,
    ` + "`" + `event_id` + "`" + `,
    ` + "`" + `service_id` + "`" + `,
    ` + "`" + `network_id` + "`" + `,
    ` + "`" + `start_at` + "`" + `,
    ` + "`" + `duration` + "`" + `,
    ` + "`" + `is_free` + "`" + `,
    ` + "`" + `name` + "`" + `,
    ` + "`" + `description` + "`" + `
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type createProgramParams struct {
	ID          int64           `json:"id"`
	Json        json.RawMessage `json:"json"`
	EventID     int32           `json:"eventID"`
	ServiceID   int32           `json:"serviceID"`
	NetworkID   int32           `json:"networkID"`
	StartAt     int64           `json:"startAt"`
	Duration    int32           `json:"duration"`
	IsFree      bool            `json:"isFree"`
	Name        string          `json:"name"`
	Description string          `json:"description"`
}

func (q *Queries) createProgram(ctx context.Context, arg createProgramParams) error {
	_, err := q.db.ExecContext(ctx, createProgram,
		arg.ID,
		arg.Json,
		arg.EventID,
		arg.ServiceID,
		arg.NetworkID,
		arg.StartAt,
		arg.Duration,
		arg.IsFree,
		arg.Name,
		arg.Description,
	)
	return err
}

const updateProgram = `-- name: updateProgram :exec
UPDATE ` + "`" + `program` + "`" + ` SET
    ` + "`" + `json` + "`" + ` = ?,
    ` + "`" + `event_id` + "`" + ` = ?,
    ` + "`" + `service_id` + "`" + ` = ?,
    ` + "`" + `network_id` + "`" + ` = ?,
    ` + "`" + `start_at` + "`" + ` = ?,
    ` + "`" + `duration` + "`" + ` = ?,
    ` + "`" + `is_free` + "`" + ` = ?,
    ` + "`" + `name` + "`" + ` = ?,
    ` + "`" + `description` + "`" + ` = ?
WHERE id = ?
`

type updateProgramParams struct {
	Json        json.RawMessage `json:"json"`
	EventID     int32           `json:"eventID"`
	ServiceID   int32           `json:"serviceID"`
	NetworkID   int32           `json:"networkID"`
	StartAt     int64           `json:"startAt"`
	Duration    int32           `json:"duration"`
	IsFree      bool            `json:"isFree"`
	Name        string          `json:"name"`
	Description string          `json:"description"`
	ID          int64           `json:"id"`
}

func (q *Queries) updateProgram(ctx context.Context, arg updateProgramParams) error {
	_, err := q.db.ExecContext(ctx, updateProgram,
		arg.Json,
		arg.EventID,
		arg.ServiceID,
		arg.NetworkID,
		arg.StartAt,
		arg.Duration,
		arg.IsFree,
		arg.Name,
		arg.Description,
		arg.ID,
	)
	return err
}
